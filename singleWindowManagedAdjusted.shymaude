in singleWindowManaged.shymaude

shymod MANAGER is
	pr MANAGER-COMMANDS .
	class Manager is disc
		numOfficers : Nat,
		managing : Bool
	endclass
endshy

shymod MANAGER-DYNAMICS is
	pr	SYSTEM .
	pr	OFFICER .
	pr	MANAGER .
	
	op scheduleManageOfficers : -> Conf [ctor] .
	
	var t timeStep : Float .
	var conf : Conf .
	var appQueue : AppQueue .
	var attrSet : AttributeSet .
	var id numOfficers currentAppId : Nat .
	var managing : Bool .

	crl < id : Manager | numOfficers : s numOfficers, attrSet >
		< id <- manageOfficers >
		=>
		< id : Manager | numOfficers : s numOfficers, attrSet >
		if numOfficers == 0 .
	
	pcrl	{
			< id : Manager | numOfficers : s numOfficers, managing : managing >
			< id <- manageOfficers >
			queue(appQueue)
			conf, time(t), app(currentAppId)
		}
		=>
		if managing
			then
				if queueLength(queue(appQueue)) > L1
					then
						{
							< s s numOfficers : Officer | state : idle, releasing : false >
							< id : Manager | numOfficers : s s numOfficers, managing : managing >
							scheduleManageOfficers
							queue(appQueue)
							conf, time(t), app(currentAppId)
						}
					else
						if queueLength(queue(appQueue)) < L0
							then
								{
									< id : Manager | numOfficers : numOfficers, managing : managing >
									[ D, < s numOfficers <- releaseOfficer > ]
									scheduleManageOfficers
									queue(appQueue)
									conf, time(t), app(currentAppId)
								}
							else
								{
									< id : Manager | numOfficers : s numOfficers, managing : managing >
									scheduleManageOfficers
									queue(appQueue)
									conf, time(t), app(currentAppId)
								}
						fi
				fi
			else
				{
					< id : Manager | numOfficers : s numOfficers, managing : queueLength(queue(appQueue)) > L0 >
					scheduleManageOfficers
					queue(appQueue)
					conf, time(t), app(currentAppId)
				}
		fi
	if numOfficers > 0
		with probability D := Uniform(minDeliveryTime, maxDeliveryTime) .
	
	eq scheduleManageOfficers = [ sampleUniform(minManagingTime, maxManagingTime), < 1 <- manageOfficers > ] .
				
	eq	processTick(< id : Manager | attrSet > conf, timeStep) = < id : Manager | attrSet > processTick(conf, timeStep) .
endshy

shymod SYSTEM-DYNAMICS is
	inc CLIENT-DYNAMICS .
	inc OFFICER-DYNAMICS .
	inc MANAGER-DYNAMICS .
	inc DOC-DYNAMICS .

	op	initState : -> Config [ctor] .
	
	op	initOfficers : Nat -> ActiveConf [ctor] .
	
	var id : Nat .
	
	prl	initState
	=>
		{
			< 1 : Client | accepted : 0, incomplete : 0, docProcessingTimeMean : 0.0, docProcessingTimeSquaredMean : 0.0, docProcessed : 0 >
			< 1 : Manager | numOfficers : N, managing : false >
			[ D, < 1 <- submit > ]
			[ E, < 1 <- manageOfficers > ]
			initOfficers(N)
			queue(empty)
			nextId(1)
			, time(0.0), app(0)
		}
			with probability D := Uniform(minSubmitTime, maxSubmitTime), E := Uniform(minManagingTime, maxManagingTime) .
	
	prl	initOfficers(s id)
		=>
		< s id : Officer | state : idle, releasing : false >
		initOfficers(id)
		[ D, < s id <- process > ]
			with probability D := Uniform(minProcessTime, maxProcessTime) .
		
	eq	initOfficers(0) = none .

endshy